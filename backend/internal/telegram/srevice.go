package telegram

import (
	"fmt"
	"log"
	"server/internal/model"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func StartTelregramLisener() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	var sessions = make(map[int64]*OrderSession)

	updates := Bot.GetUpdatesChan(u)

	for update := range updates {

		func() {
			defer func() {
				if r := recover(); r != nil {
					log.Println("‚ö†Ô∏è Panic recovered:", r)
				}
			}()

			log.Println("üü¢ Update received")

			if update.Message != nil {
				BotCommands(*update.Message, sessions)
			}

			if update.CallbackQuery != nil {
				KeyBordCalback(update)
			}
			session, ok := sessions[update.Message.From.ID]
			if ok {
				userID := update.Message.From.ID
				chatID := update.Message.Chat.ID
				switch session.Step {
				case "name":
					session.Data["name"] = update.Message.Chat.UserName
					session.Step = "email"
					Bot.Send(tgbotapi.NewMessage(chatID, "üìß –í–≤–µ–¥–∏—Ç–µ email:"))

				case "email":
					session.Data["email"] = update.Message.Text
					session.Step = "contact"
					Bot.Send(tgbotapi.NewMessage(chatID, "üì± –í–≤–µ–¥–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Telegram @username –∏–ª–∏ –Ω–æ–º–µ—Ä):"))

				case "contact":
					session.Data["contact"] = update.Message.Text
					session.Step = "description"
					Bot.Send(tgbotapi.NewMessage(chatID, "üìù –û–ø–∏—à–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏, –∂–µ–ª–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç –∏ —Å—Ä–æ–∫–∏:"))

				case "description":
					session.Data["description"] = update.Message.Text
					session.Step = "files"
					Bot.Send(tgbotapi.NewMessage(chatID, "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –¢–ó, –º–∞–∫–µ—Ç—ã –∏ —Ç.–¥.) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':"))

				case "files":
					if session.Files == nil {
						session.Files = []model.FileItem{}
					}

					if update.Message.Document != nil {
						session.Files = append(session.Files, model.FileItem{
							FileID:   update.Message.Document.FileID,
							FileName: update.Message.Document.FileName,
						})
						Bot.Send(tgbotapi.NewMessage(chatID, "üìé –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'"))
						return

					} else if update.Message.Photo != nil {
						photo := update.Message.Photo[len(update.Message.Photo)-1]
						session.Files = append(session.Files, model.FileItem{
							FileID:   photo.FileID,
							FileName: "photo.jpg",
						})
						Bot.Send(tgbotapi.NewMessage(chatID, "üñº –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'"))
						return

					} else if strings.ToLower(update.Message.Text) == "–≥–æ—Ç–æ–≤–æ" {
						session.Step = "done"

						go TelegramRequestPush(&model.RequestModel{
							UserName:  session.Data["name"],
							Email:     session.Data["email"],
							Messanger: session.Data["contact"],
							Comment:   session.Data["description"],
							Files:     session.Files,
						})

						Bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏."))
						delete(sessions, userID)
						return
					} else {
						Bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'"))
					}
				}

			}

		}()
		time.Sleep(3 * time.Second)
	}
}
func BotCommands(updt tgbotapi.Message, sessions map[int64]*OrderSession) {

	cmd := updt.Command()
	chatID := updt.Chat.ID
	var text string
	caybordReturn := false

	switch cmd {
	case "auth":
		text = "–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
	case "my_order":
		text = "–ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤"
		caybordReturn = true
	case "create_order":
		text = "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
		sessions[chatID] = &OrderSession{
			UserID:    updt.Chat.ID,
			Step:      "name",
			Data:      make(map[string]string),
			StartedAt: time.Now(),
		}
	case "chat":
		text = "–°–æ–∑–¥–∞–Ω —á–∞—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º"
	}

	if len(text) > 1 {
		msg := tgbotapi.NewMessage(chatID, text)
		if caybordReturn {
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", "my_order_active"),
					tgbotapi.NewInlineKeyboardButtonData("üì¶ –ó–∞–∫—Ä—Ç—ã–µ –∑–∞–∫–∞–∑—ã", "my_order_close"),
				),
			)
		}
		if _, err := Bot.Send(msg); err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
	}
}
func KeyBordCalback(update tgbotapi.Update) {

	calback := update.CallbackQuery.Data
	log.Println("üîò Callback:", calback)
	if _, err := Bot.Request(tgbotapi.NewCallback(update.CallbackQuery.ID, "‚úÖ")); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∫–æ–ª–±—ç–∫:", err)
	}
}

func TelegramRequestPush(req *model.RequestModel) {
	chatID := -1002790831188

	var messageLines []string
	if req.UserName != "" {
		messageLines = append(messageLines, fmt.Sprintf("üë§ –ò–º—è: %s", req.UserName))
	}
	if req.Email != "" {
		messageLines = append(messageLines, fmt.Sprintf("üìß Email: %s", req.Email))
	}
	if req.Messanger != "" {
		messageLines = append(messageLines, fmt.Sprintf("üí¨ –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: %s", req.Messanger))
	}
	if req.Comment != "" {
		messageLines = append(messageLines, fmt.Sprintf("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s", req.Comment))
	}
	fullMessage := strings.Join(messageLines, "\n")

	// –°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç
	_, err := Bot.Send(tgbotapi.NewMessage(int64(chatID), fullMessage))
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
	}

	// –ü–æ—Ç–æ–º –≤—Å–µ —Ñ–∞–π–ª—ã
	for _, file := range req.Files {
		doc := tgbotapi.NewDocument(int64(chatID), tgbotapi.FileID(file.FileID))
		doc.Caption = fmt.Sprintf("üìé %s", file.FileName)
		_, err := Bot.Send(doc)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:", err)
		}
	}
}
